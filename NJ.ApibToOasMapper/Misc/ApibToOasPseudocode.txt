Map(Apib apib)
  apiNamedTypes = ApiTypesProvider.GetApiNamedTypes(apib)
  return OpenApiObject(
    OpenApi = "3.0.3",
    Servers = MapMetadataSectionToServerObject(apib.MetadataSection),
    Info = MapApiNameAndOverviewSectionToInfoObject(apib.ApiNameAndOverviewSection),
    Paths = MapResources(apib, apiNamedTypes),
    Tags = ResourceGroupSectionToTagObjectMapper.Map(apib.ResourceGroupSections),
    Components = MapperToComponentsObject.Map(apib, apiNamedTypes)
  )

GetApiNamedTypes(Apib apib)
  resultInternal = GetNamedTypesInternal(apib)
  return ConvertNamedTypesInternal(resultInternal)

GetNamedTypesInternal(Apib apib)
  resources = GetAllResourceSections(apib)
  resourceTypes = resources.Select(r => GetApiTypeInternal(r.AttributesSection, r.Identifier))
  dataStructureTypes = apib.DataStructuresSections.Select(GetApiTypeInternal)
  otherTypes = [ApiTypeInternal("object")]
  return resourceTypes.Concat(dataStructureTypes).Concat(otherTypes)

GetAllResourceSections(Apib apib)
  resourcesFromGroups = apib.ResourceGroupSections.SelectMany(g => g.ResourceSections)
  directResources = apib.ResourceSections
  return resourcesFromGroups.Concat(directResources)

ApiTypeInternal GetApiTypeInternal(DataStructureSection dataStructure)
  properties = GetProperties(dataStructure.Attributes);
  return ApiTypeInternal(dataStructure.Identifier, properties, dataStructure.TypeDefinition);


MapMetadataSectionToServerObject(MetadataSection metadataSection)
  return [ ServerObject(metadataSection["HOST"]) ]

MapApiNameAndOverviewSectionToInfoObject(ApiNameAndOverviewSection apiNameAndOverviewSection)
  return InfoObject(
    Title = apiNameAndOverviewSection.Name,
    Description = apiNameAndOverviewSection.Description,
    Version = "1.0.0"
  )

MapResources(Apib apib)
  return MapResourcesToDictionary(Apib apib, ApiType[] apiNamedTypes)

MapResourcesToDictionary(Apib apib, ApiType[] apiNamedTypes)
  resourceInfos = GetResourceInfos(apib)
  operationInfos = resourceInfos.SelectMany(ri => MapResourceSectionToOperationInfo(ri.ResourceSection, ri.ResourceGroupSection, apiNamedTypes))
  operationInfosGroupedByPath = operationInfos.GroupBy(o => o.Path)
  return operationInfosGroupedByPath.ToDictionary(g => g.Key, MapOperationInfosToPathItemObject)

GetResourceInfos(Apib apib)
  resourcesWithExistingParentSections = apib.ResourceGroupSections.SelectMany(g => g.ResourceSections.Select(r => new ResourceInfo(r, g)))
  resourcesWithNullParentSections = apib.ResourceSections.Select(r => new ResourceInfo(r))
  return resourcesWithExistingParentSections.Concat(resourcesWithNullParentSections)

MapOperationInfosToPathItemObject(IEnumerable<OperationInfo> samePathOperationInfos)
  foreach (var operationInfo in samePathOperationInfos)
    switch (operationInfo.HttpRequestMethod)
      Get => get = operationInfo.OperationObject
      Post => post = operationInfo.OperationObject
      Put => put = operationInfo.OperationObject
      Delete => delete = operationInfo.OperationObject
      Head => head = operationInfo.OperationObject
      Options => options = operationInfo.OperationObject
      Patch => patch = operationInfo.OperationObject
      Trace => trace = operationInfo.OperationObject
  return PathItemObject(get, post, put, delete, head, options, patch, trace)

MapResourceSectionToOperationInfo(ResourceSection resourceSection, ResourceGroupSection resourceGroupSection, IReadOnlyCollection<ApiType> apiNamedTypes)
  return resourceSection.ActionSections.Select(a => MapActionSectionToOperationInfo(a, resourceSection, resourceGroupSection, apiNamedTypes))

MapActionSectionToOperationInfo(ActionSection actionSection, ResourceSection resourceSection, ResourceGroupSection resourceGroupSection, IReadOnlyCollection<ApiType> apiNamedTypes)
  actionCoercedPath = GetActionPath(actionSection.UriTemplate.Path, resourceSection.UriTemplate.Path)
  operationObject = ActionSectionMapper.Map(actionSection, resourceSection, resourceGroupSection, apiNamedTypes)
  return OperationInfo(operationObject, actionCoercedPath, actionSection.HttpRequestMethod)

GetActionPath(string actionPath, string resourcePath)
  if (actionPath is null)
    return Regex.Replace(resourcePath, ResourceQueryPathParameterPattern, "");
  else
    return Regex.Replace(actionPath, ResourceQueryPathParameterPattern, "");

MapActionSectionToOperationObject(ActionSection actionSection, ResourceSection resourceSection, ResourceGroupSection resourceGroupSection, IReadOnlyCollection<ApiType> apiNamedTypes)
  (requestBodyObject, requestBodyParameters) = MapRequestSections(actionSection, apiNamedTypes)
  responseSectionsGroupedByStatusCode = actionSection.ResponseSections.GroupBy(s => s.HttpStatusCode)
  statusCodesWithResponseObjects = responseSectionsGroupedByStatusCode.ToDictionary(g => g.Key.ToString(), g => (IResponseOrReferenceObject)MapToResponseObject(g.Key, g, apiNamedTypes))
  responses = new ResponsesObject { HttpStatusCodesWithResponses = statusCodesWithResponseObjects }
  parameterObjectsFromUriTemplate = MapUriTemplate(actionSection, resourceSection)
  return OperationObject(
    Summary = actionSection.Identifier,
    Description = actionSection.Description,
    OperationId = actionSection.Identifier,
    RequestBody = requestBodyObject,
    Tags = ResourceGroupSectionToTagsMapper.MapToStrings([ resourceGroupSection ]),
    Responses = responses,
    Parameters = requestBodyParameters.Concat(parameterObjectsFromUriTemplate)
  )

MapToResponseObject(int statusCode, IEnumerable<ResponseSection> responseSections, IReadOnlyCollection<ApiType> apiNamedTypes)
  return ResponseObject(
    Description = Constants.StatusCodesWithDescriptions[statusCode]
    Headers = responseSections.SelectMany(r => MapHeaderSectionToNamesHeaderObjects(r.HeadersSection)).DistinctBy(r => r.Key).ToDictionary(r => r.Key, r => r.Value)
    Content = responseSections.Where(r => r.MediaType is not null).ToDictionary(r => r.MediaType, r => MapperToMediaTypeObject.MapToMediaTypeObject(r.MediaType, r.BodySection.Content, r.SchemaSection, r.AttributesSection, apiNamedTypes, false))
  )

MapHeaderSectionToNamesWithHeaderObjects(HeadersSection headersSection)
  return headersSection.ToDictionary(h => h.Key, h => MapHeaderToHeaderObject(h.Value))

MapHeaderToHeaderObject(object headerValue)
  typeString = headerValue switch
    int => "string",
    string => "string",
    _ => "object"
  return HeaderObject(Schema = new SchemaObject { Type = typeString })

MapUriTemplate(ActionSection actionSection, ResourceSection resourceSection)
  if (actionSection.UriParametersSection.Parameters is not null)
    pathParameters = actionSection.UriParametersSection.Parameters
  else if (resourceSection.ParametersSection.Parameters is not null)
    pathParameters = resourceSection.ParametersSection.Parameters
  if (actionSection.UriTemplate.Path is not null)
    parsedPathParameters = UriTemplateParametersParser.ParsePathParameters(actionSection.UriTemplate.Path)
  else
    parsedPathParameters = UriTemplateParametersParser.ParsePathParameters(resourceSection.UriTemplate.Path)
  return pathParameters.Select(p => MapParameterToParameterObject(p, parsedPathParameters))

MapParameterToParameterObject(UriParameter parameter, ICollection<string> parsedPathParameters)
  if (parsedPathParameters.Contains(parameter.Name))
    in = "path";
  else
    in = "query";
  return ParameterObject(
    Name = parameter.Name,
    In = in,
    Description = parameter.Description,
    Required = parameter.Required,
    Example = parameter.ExampleValue,
    Schema = SchemaObject(Type = parameter.Type, Default = parameter.DefaultValue),
  )

MapRequestSections(ActionSection actionSection, IReadOnlyCollection<ApiType> apiNamedTypes)
  parameters = actionSection.RequestSections.SelectMany(r => r.HeadersSection.Select(kv => MapHeaderSectionKeyValueToParameter(kv.Key, kv.Value)))
  mediaTypesWithMediaTypeObjects = requestSections.ToDictionary(r => r.MediaType, r => MapRequestSection(r, actionSection, apiNamedTypes))
  requestBodyObject = RequestBodyObject(Content = mediaTypesWithMediaTypeObjects)
  return (requestBodyObject, parameters)

MapHeaderSectionKeyValueToParameter(string key, object value)
  return ParameterObject(
    Name = key,
    In = "header",
    Description = "e.g. " + value,
    Required = false,
    Example = value,
    Schema = MapperToSchemaObject.Map(value.ToString())
  )

MapRequestSection(RequestSection requestSection, ActionSection actionSection, IReadOnlyCollection<ApiType> apiNamedTypes)
  if (requestSection.AttributesSection is null)
    attributesSection = actionSection.AttributesSection
  else
    attributesSection = requestSection.AttributesSection
  var result = MapperToMediaTypeObject.MapToMediaTypeObject(requestSection.MediaType, requestSection.BodySection.Content, requestSection.SchemaSection, attributesSection, apiNamedTypes, true);
  return result;